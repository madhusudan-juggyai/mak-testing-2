import React, { useState, useEffect } from "react";
import "./App.css";
import axios from "axios";
import { GoogleOAuthProvider, GoogleLogin } from "@react-oauth/google";
import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";

const BACKEND_URL = 'https://quirky-maxwell.emergent.host';
const API = `${BACKEND_URL}/api`;
const VAPI_PUBLIC_KEY = '54bc38a3-ee48-4196-aca1-9c69eab79d1e';
const GOOGLE_CLIENT_ID = '854027414985-6rm434tqail2661j4tv9kgl0350bn8rf.apps.googleusercontent.com';
const STRIPE_PUBLISHABLE_KEY = 'pk_live_51RWMzmP5uMQGZpKDO5pprsO2Sj2BKKPYdGnPrOdQllGoK8HLQdOwblYJkSBGT5ryHY7eCuZYHSvGzJTSXnmI3s4t00FBRp8Ly1';

// Header Component with Credits Display
const Header = ({ user, onShowAuth, onNavigate }) => {
  return (
    <header className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <div className="w-10 h-10 bg-indigo-600 rounded-lg flex items-center justify-center">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
              </svg>
            </div>
            <button 
              onClick={() => onNavigate('dashboard')}
              className="ml-3 text-2xl font-bold text-gray-900 hover:text-indigo-600"
            >
              VoicePrep AI
            </button>
          </div>
          
          {/* Navigation & Credits */}
          <div className="flex items-center space-x-6">
            {user && (
              <>
                <button 
                  onClick={() => onNavigate('dashboard')}
                  className="text-gray-600 hover:text-gray-800 font-medium"
                >
                  Dashboard
                </button>
                <button 
                  onClick={() => onNavigate('interview')}
                  className="text-gray-600 hover:text-gray-800 font-medium"
                >
                  New Interview
                </button>
                
                {/* Credits Display */}
                <div className="flex items-center bg-indigo-50 px-3 py-2 rounded-lg">
                  <div className="w-5 h-5 bg-indigo-600 rounded-full flex items-center justify-center mr-2">
                    <span className="text-xs text-white font-bold">C</span>
                  </div>
                  <span className="font-semibold text-indigo-700">{user.credits}</span>
                  <span className="text-sm text-indigo-600 ml-1">credits</span>
                </div>
                
                <div className="flex items-center space-x-3">
                  <span className="text-sm text-gray-600">Welcome, {user.name}</span>
                  <button 
                    onClick={() => onShowAuth('logout')}
                    className="text-sm text-gray-500 hover:text-gray-700"
                  >
                    Logout
                  </button>
                </div>
              </>
            )}
            
            {!user && (
              <div className="flex items-center space-x-3">
                <button 
                  onClick={() => onShowAuth('login')}
                  className="text-sm text-gray-600 hover:text-gray-800 font-medium"
                >
                  Login
                </button>
                <button 
                  onClick={() => onShowAuth('signup')}
                  className="bg-indigo-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-indigo-700 transition-colors"
                >
                  Sign Up
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );
};

// Welcome Credits Modal
const WelcomeCreditsModal = ({ isOpen, onClose, onGetStarted }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl p-8 max-w-md mx-4 text-center relative">
        {/* Celebration Animation */}
        <div className="mb-6">
          <div className="w-20 h-20 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full mx-auto flex items-center justify-center mb-4 animate-bounce">
            <span className="text-3xl">🎉</span>
          </div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Welcome to VoicePrep AI!</h2>
          <p className="text-gray-600">Congratulations! You've received</p>
        </div>
        
        {/* Credits Display */}
        <div className="bg-indigo-50 rounded-lg p-6 mb-6">
          <div className="flex items-center justify-center mb-2">
            <div className="w-12 h-12 bg-indigo-600 rounded-full flex items-center justify-center mr-3">
              <span className="text-xl text-white font-bold">C</span>
            </div>
            <span className="text-4xl font-bold text-indigo-600">10</span>
          </div>
          <p className="text-indigo-700 font-semibold">Free Credits</p>
          <p className="text-sm text-gray-600 mt-2">That's 10 minutes of free interview practice!</p>
        </div>
        
        <button
          onClick={onGetStarted}
          className="w-full bg-indigo-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-indigo-700 transition-colors"
        >
          Get Started
        </button>
      </div>
    </div>
  );
};
// Header Component with Credits Display
const Header = ({ user, onShowAuth, onNavigate }) => {
  return (
    <header className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <div className="w-10 h-10 bg-indigo-600 rounded-lg flex items-center justify-center">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
              </svg>
            </div>
            <button 
              onClick={() => onNavigate('dashboard')}
              className="ml-3 text-2xl font-bold text-gray-900 hover:text-indigo-600"
            >
              VoicePrep AI
            </button>
          </div>
          
          {/* Navigation & Credits */}
          <div className="flex items-center space-x-6">
            {user && (
              <>
                <button 
                  onClick={() => onNavigate('dashboard')}
                  className="text-gray-600 hover:text-gray-800 font-medium"
                >
                  Dashboard
                </button>
                <button 
                  onClick={() => onNavigate('interview')}
                  className="text-gray-600 hover:text-gray-800 font-medium"
                >
                  New Interview
                </button>
                
                {/* Credits Display */}
                <div className="flex items-center bg-indigo-50 px-3 py-2 rounded-lg">
                  <div className="w-5 h-5 bg-indigo-600 rounded-full flex items-center justify-center mr-2">
                    <span className="text-xs text-white font-bold">C</span>
                  </div>
                  <span className="font-semibold text-indigo-700">{user.credits}</span>
                  <span className="text-sm text-indigo-600 ml-1">credits</span>
                </div>
                
                <div className="flex items-center space-x-3">
                  <span className="text-sm text-gray-600">Welcome, {user.name}</span>
                  <button 
                    onClick={() => onShowAuth('logout')}
                    className="text-sm text-gray-500 hover:text-gray-700"
                  >
                    Logout
                  </button>
                </div>
              </>
            )}
            
            {!user && (
              <div className="flex items-center space-x-3">
                <button 
                  onClick={() => onShowAuth('login')}
                  className="text-sm text-gray-600 hover:text-gray-800 font-medium"
                >
                  Login
                </button>
                <button 
                  onClick={() => onShowAuth('signup')}
                  className="bg-indigo-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-indigo-700 transition-colors"
                >
                  Sign Up
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );
};

// Welcome Credits Modal
const WelcomeCreditsModal = ({ isOpen, onClose, onGetStarted }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl p-8 max-w-md mx-4 text-center relative">
        {/* Celebration Animation */}
        <div className="mb-6">
          <div className="w-20 h-20 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full mx-auto flex items-center justify-center mb-4 animate-bounce">
            <span className="text-3xl">🎉</span>
          </div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Welcome to VoicePrep AI!</h2>
          <p className="text-gray-600">Congratulations! You've received</p>
        </div>
        
        {/* Credits Display */}
        <div className="bg-indigo-50 rounded-lg p-6 mb-6">
          <div className="flex items-center justify-center mb-2">
            <div className="w-12 h-12 bg-indigo-600 rounded-full flex items-center justify-center mr-3">
              <span className="text-xl text-white font-bold">C</span>
            </div>
            <span className="text-4xl font-bold text-indigo-600">10</span>
          </div>
          <p className="text-indigo-700 font-semibold">Free Credits</p>
          <p className="text-sm text-gray-600 mt-2">That's 10 minutes of free interview practice!</p>
        </div>
        
        <button
          onClick={onGetStarted}
          className="w-full bg-indigo-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-indigo-700 transition-colors"
        >
          Get Started
        </button>
      </div>
    </div>
  );
};

// Authentication Component
const AuthComponent = ({ authType, onBack, onAuthSuccess }) => {
  const [isLogin, setIsLogin] = useState(authType === 'login');
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
    setError(''); // Clear error when user types
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const endpoint = isLogin ? '/auth/login' : '/auth/register';
      const response = await axios.post(`${API}${endpoint}`, formData);
      
      if (response.data.success) {
        // Store user data in localStorage
        localStorage.setItem('user', JSON.stringify(response.data.user));
        localStorage.setItem('token', response.data.token);
        onAuthSuccess(response.data.user);
      } else {
        setError(response.data.message || 'Authentication failed');
      }
    } catch (error) {
      console.error('Auth error:', error);
      setError(error.response?.data?.message || 'Authentication failed. Please try again.');
    }
    setLoading(false);
  };

  const handleGoogleSuccess = async (credentialResponse) => {
    setLoading(true);
    setError('');
    
    try {
      // Send the Google credential to our backend
      const response = await axios.post(`${API}/auth/google`, {
        credential: credentialResponse.credential
      });
      
      if (response.data.success) {
        // Store user data in localStorage
        localStorage.setItem('user', JSON.stringify(response.data.user));
        localStorage.setItem('token', response.data.token);
        onAuthSuccess(response.data.user);
      } else {
        setError(response.data.message || 'Google authentication failed');
      }
    } catch (error) {
      console.error('Google auth error:', error);
      setError(error.response?.data?.message || 'Google authentication failed. Please try again.');
    }
    setLoading(false);
  };

  const handleGoogleError = () => {
    setError('Google authentication failed. Please try again.');
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-md mx-auto px-4">
        <div className="bg-white rounded-lg shadow p-8">
          <div className="flex items-center mb-6">
            <button onClick={onBack} className="mr-4 text-gray-600 hover:text-gray-800">
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <h2 className="text-3xl font-bold text-gray-900">
              {isLogin ? 'Welcome Back' : 'Create Account'}
            </h2>
          </div>

          {error && (
            <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
              {error}
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-4">
            {!isLogin && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                  required={!isLogin}
                />
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Password</label>
              <input
                type="password"
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                required
                minLength="6"
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-indigo-600 text-white py-3 px-4 rounded-md font-semibold hover:bg-indigo-700 transition-colors disabled:opacity-50"
            >
              {loading ? 'Please wait...' : (isLogin ? 'Sign In' : 'Create Account')}
            </button>
          </form>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white text-gray-500">Or continue with</span>
              </div>
            </div>

            <GoogleLogin
              onSuccess={handleGoogleSuccess}
              onError={handleGoogleError}
              disabled={loading}
              text={isLogin ? "signin_with" : "signup_with"}
              shape="rectangular"
              theme="outline"
              size="large"
              width="100%"
            />
          </div>

          <div className="mt-6 text-center">
            <button
              onClick={() => setIsLogin(!isLogin)}
              className="text-sm text-indigo-600 hover:text-indigo-500"
            >
              {isLogin ? "Don't have an account? Sign up" : "Already have an account? Sign in"}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Mock Interview Form Component
const MockInterviewForm = ({ onBack, onStartInterview }) => {
  const [formData, setFormData] = useState({
    current_role: '',
    current_company: '',
    pm_experience: '',
    total_experience: '',
    target_role: '',
    target_company: '',
    job_description: ''
  });
  const [jobLink, setJobLink] = useState('');
  const [useJobLink, setUseJobLink] = useState(false);
  const [loading, setLoading] = useState(false);

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleJobLinkScrape = async () => {
    if (!jobLink) return;
    
    setLoading(true);
    try {
      const response = await axios.post(`${API}/scrape-job`, {
        job_link: jobLink,
        current_role: formData.current_role,
        current_company: formData.current_company,
        pm_experience: parseInt(formData.pm_experience),
        total_experience: parseInt(formData.total_experience)
      });
      
      setFormData({
        ...formData,
        target_role: response.data.target_role,
        target_company: response.data.target_company,
        job_description: response.data.job_description
      });
    } catch (error) {
      alert('Failed to scrape job details. Please fill manually.');
    }
    setLoading(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      const response = await axios.post(`${API}/generate-mock-interview-prompt`, {
        ...formData,
        pm_experience: parseInt(formData.pm_experience),
        total_experience: parseInt(formData.total_experience)
      });
      
      onStartInterview(response.data.prompt, 'mock_interview');
    } catch (error) {
      alert('Failed to generate interview prompt');
    }
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-2xl mx-auto px-4">
        <div className="bg-white rounded-lg shadow p-8">
          <div className="flex items-center mb-6">
            <button onClick={onBack} className="mr-4 text-gray-600 hover:text-gray-800">
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <h2 className="text-3xl font-bold text-gray-900">Mock Interview Setup</h2>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Current Role Info */}
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Current Role</label>
                <input
                  type="text"
                  name="current_role"
                  value={formData.current_role}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Current Company</label>
                <input
                  type="text"
                  name="current_company"
                  value={formData.current_company}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>
            </div>

            {/* Experience */}
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">PM Experience (years)</label>
                <input
                  type="number"
                  name="pm_experience"
                  value={formData.pm_experience}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  min="0"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Total Experience (years)</label>
                <input
                  type="number"
                  name="total_experience"
                  value={formData.total_experience}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  min="0"
                  required
                />
              </div>
            </div>

            {/* Job Link Option */}
            <div className="border-t pt-6">
              <div className="flex items-center mb-4">
                <input
                  type="checkbox"
                  id="useJobLink"
                  checked={useJobLink}
                  onChange={(e) => setUseJobLink(e.target.checked)}
                  className="mr-2"
                />
                <label htmlFor="useJobLink" className="text-sm font-medium text-gray-700">
                  I have a job posting URL to auto-fill details
                </label>
              </div>

              {useJobLink && (
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">Job Posting URL</label>
                  <div className="flex gap-2">
                    <input
                      type="url"
                      value={jobLink}
                      onChange={(e) => setJobLink(e.target.value)}
                      placeholder="https://..."
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    />
                    <button
                      type="button"
                      onClick={handleJobLinkScrape}
                      disabled={loading || !jobLink}
                      className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 disabled:opacity-50"
                    >
                      {loading ? 'Scraping...' : 'Auto-fill'}
                    </button>
                  </div>
                </div>
              )}
            </div>

            {/* Target Role Info */}
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Target Role</label>
                <input
                  type="text"
                  name="target_role"
                  value={formData.target_role}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Target Company</label>
                <input
                  type="text"
                  name="target_company"
                  value={formData.target_company}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>
            </div>

            {/* Job Description */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Job Description</label>
              <textarea
                name="job_description"
                value={formData.job_description}
                onChange={handleInputChange}
                rows={6}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                placeholder="Paste the job description here..."
                required
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50"
            >
              {loading ? 'Setting up interview...' : 'Start Mock Interview'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

// Voice Conversation Component
const VoiceConversation = ({ prompt, type, onBack }) => {
  const [transcript, setTranscript] = useState('');
  const [summary, setSummary] = useState('');
  const [isCallActive, setIsCallActive] = useState(false);
  const [callStatus, setCallStatus] = useState('ready'); // ready, connecting, active, paused, ended
  const [vapiInstance, setVapiInstance] = useState(null);
  const [callId, setCallId] = useState(null);

  useEffect(() => {
    // Debug environment variables
    console.log('=== ENVIRONMENT VARIABLES DEBUG ===');
    console.log('REACT_APP_VAPI_PUBLIC_KEY:', process.env.REACT_APP_VAPI_PUBLIC_KEY);
    console.log('REACT_APP_BACKEND_URL:', process.env.REACT_APP_BACKEND_URL);
    console.log('VAPI_PUBLIC_KEY constant:', VAPI_PUBLIC_KEY);
    console.log('=====================================');
    
    // Initialize Vapi.ai when component mounts
    const initializeVapi = async () => {
      try {
        console.log('Initializing Vapi with key:', VAPI_PUBLIC_KEY);
        
        // First check microphone permissions
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
          try {
            setTranscript('🔍 Checking microphone permissions...\n');
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            stream.getTracks().forEach(track => track.stop()); // Clean up
            setTranscript(prev => prev + '✅ Microphone access granted.\n');
          } catch (micError) {
            console.warn('Microphone access denied:', micError);
            setTranscript(prev => prev + '⚠️ Microphone access required for voice calls.\n');
          }
        }
        
        const Vapi = (await import('@vapi-ai/web')).default;
        
        const vapi = new Vapi(VAPI_PUBLIC_KEY);
        
        // Set up event listeners
        vapi.on('call-start', () => {
          console.log('Call started');
          setCallStatus('active');
          setIsCallActive(true);
          setTranscript('🟢 Call started. AI assistant is ready...\n\n');
        });

        vapi.on('call-end', (callData) => {
          console.log('Call ended', callData);
          setCallStatus('ended');
          setIsCallActive(false);
          setTranscript(prev => prev + '\n🔴 Call ended\n');
          
          // Get real call summary from Vapi
          if (callData && callData.call) {
            setCallId(callData.call.id);
            // Summary will be retrieved separately
            setTimeout(() => {
              fetchCallSummary(callData.call.id);
            }, 2000);
          } else {
            // Generate summary even without call data
            setTimeout(() => {
              fetchCallSummary('completed');
            }, 1000);
          }
        });

        vapi.on('speech-start', () => {
          console.log('User started speaking');
          setTranscript(prev => prev + '🎤 You started speaking...\n');
        });

        vapi.on('speech-end', () => {
          console.log('User stopped speaking');
          setTranscript(prev => prev + '⏹️ Processing your input...\n');
        });

        vapi.on('message', (message) => {
          console.log('Message received:', message);
          
          // Handle transcript messages with better error checking
          if (message && message.type === 'transcript') {
            const role = message.role || (message.transcript && message.transcript.role) || 'unknown';
            const text = message.transcript?.text || message.text || message.content || '';
            
            if (text && text.trim()) {
              const speaker = role === 'user' ? '👤 You' : '🤖 AI Assistant';
              setTranscript(prev => prev + `${speaker}: ${text}\n\n`);
            }
          }
          
          // Handle conversation updates with better parsing
          if (message && message.type === 'conversation-update') {
            if (message.conversation && Array.isArray(message.conversation) && message.conversation.length > 0) {
              const lastMessage = message.conversation[message.conversation.length - 1];
              if (lastMessage && lastMessage.content) {
                const speaker = lastMessage.role === 'user' ? '👤 You' : '🤖 AI Assistant';
                setTranscript(prev => prev + `${speaker}: ${lastMessage.content}\n\n`);
              }
            }
          }
          
          // Handle function calls
          if (message && message.type === 'function-call' && message.functionCall) {
            const functionName = message.functionCall.name || 'unknown';
            setTranscript(prev => prev + `⚙️ Function called: ${functionName}\n`);
          }
        });

        vapi.on('error', (error) => {
          console.error('Vapi error:', error);
          setCallStatus('ready');
          
          let errorMsg = 'Unknown error occurred';
          
          try {
            // Enhanced error parsing for Vapi errors
            if (typeof error === 'string') {
              errorMsg = error;
            } else if (error && error.message) {
              errorMsg = error.message;
            } else if (error && error.action) {
              // Handle Vapi-specific error format
              errorMsg = `Vapi Error (${error.action}): ${error.error || error.errorMsg || 'Unknown issue'}`;
            } else if (error && error.error) {
              errorMsg = typeof error.error === 'string' ? error.error : JSON.stringify(error.error);
            } else if (error && typeof error === 'object') {
              // Try to extract meaningful info from error object
              if (error.type) {
                errorMsg = `Error type: ${error.type}`;
              } else {
                errorMsg = `Error details: ${JSON.stringify(error, null, 2)}`;
              }
            }
            
            // Add specific guidance for common errors
            if (errorMsg.includes('camera') || errorMsg.includes('microphone') || errorMsg.includes('permission')) {
              errorMsg += '\n\n💡 Microphone access issue. Please grant permissions when prompted and try again.';
            } else if (errorMsg.includes('ejection') || errorMsg.includes('ended')) {
              errorMsg += '\n\n💡 Call ended unexpectedly. This may be due to microphone permissions or network issues.';
            }
            
          } catch (parseError) {
            console.error('Error parsing failed:', parseError);
            errorMsg = 'Error parsing failed - check console for details';
          }
          
          setTranscript(prev => prev + `\n❌ Error: ${errorMsg}\n\n💡 Common solutions:\n• Grant microphone permissions when prompted\n• Refresh the page and try again\n• Check if you're using HTTPS\n• Ensure stable internet connection\n`);
        });

        console.log('Vapi initialized successfully');
        setVapiInstance(vapi);
        setTranscript('✅ Voice assistant initialized and ready to start.\n\n');
        
      } catch (error) {
        console.error('Failed to initialize Vapi:', error);
        
        let errorMsg = 'Unknown initialization error';
        
        try {
          if (typeof error === 'string') {
            errorMsg = error;
          } else if (error && error.message) {
            errorMsg = error.message;
          } else if (error && typeof error === 'object') {
            errorMsg = JSON.stringify(error, null, 2);
          }
        } catch (e) {
          errorMsg = 'Failed to parse initialization error';
        }
        
        setTranscript(`❌ Failed to initialize voice assistant: ${errorMsg}\n\n💡 This could be due to:\n• Network connectivity issues\n• Invalid API keys\n• Browser compatibility\n• Microphone access denied\n\nPlease refresh and try again.`);
      }
    };

    initializeVapi();

    return () => {
      // Cleanup
      if (vapiInstance) {
        try {
          vapiInstance.stop();
        } catch (e) {
          console.log('Cleanup error:', e);
        }
      }
    };
  }, []);

  const fetchCallSummary = async (callId) => {
    try {
      // This would typically call Vapi's API to get call analysis
      // For now, we'll create a meaningful summary based on the type
      const summaryText = type === 'mock_interview' 
        ? `📊 Mock Interview Summary\n\n✅ Session completed successfully\n\n💡 Key Areas Covered:\n• Behavioral questions and STAR method responses\n• Product strategy and prioritization\n• Technical PM skills assessment\n• Communication and leadership examples\n\n📈 Recommendations:\n• Continue practicing articulation of impact metrics\n• Develop more specific examples of stakeholder management\n• Strengthen technical product knowledge\n\n⭐ Overall: Strong foundation with room for targeted improvement`
        : `📊 One-on-One Summary\n\n✅ Conversation completed successfully\n\n💬 Discussion Points:\n• Current role performance and challenges\n• Career development goals\n• Team dynamics and collaboration\n• Feedback and growth opportunities\n\n📋 Next Steps:\n• Follow up on discussed action items\n• Schedule check-ins on progress\n• Continue open communication\n\n⭐ Overall: Productive and engaging discussion`;
      
      setSummary(summaryText);
    } catch (error) {
      console.error('Failed to fetch call summary:', error);
      setSummary('Summary generation failed. Please try again later.');
    }
  };

  const startCall = async () => {
    if (!vapiInstance) {
      console.error('Vapi not initialized');
      setTranscript('❌ Voice assistant not ready. Please refresh and try again.\n');
      return;
    }

    try {
      setCallStatus('connecting');
      setTranscript('🔄 Connecting to voice assistant...\n');
      
      // Use existing mock interview assistant from your Vapi.ai account
      const assistantId = '92fe2ebc-86dc-46bc-b018-9bd2a88c0c8c'; // Product management mock interviewer

      console.log('Using existing assistant ID:', assistantId);
      console.log('Prompt to be used:', prompt);
      console.log('API Key being used:', VAPI_PUBLIC_KEY);
      
      // Start call with existing assistant
      await vapiInstance.start(assistantId);
      
    } catch (error) {
      console.error('Failed to start call - Full error object:', error);
      console.error('Error keys:', Object.keys(error || {}));
      console.error('Error response:', error?.response);
      console.error('Error data:', error?.response?.data);
      
      setCallStatus('ready');
      
      let errorMessage = 'Unknown error';
      
      try {
        // Handle Vapi.ai specific errors
        if (error?.response?.data) {
          // This is likely a Vapi.ai API error response
          const apiError = error.response.data;
          if (apiError.message) {
            errorMessage = `Vapi.ai API Error: ${apiError.message}`;
          } else if (apiError.error) {
            errorMessage = `Vapi.ai API Error: ${apiError.error}`;
          } else {
            errorMessage = `Vapi.ai API Error: ${JSON.stringify(apiError)}`;
          }
        } else if (error?.message) {
          errorMessage = error.message;
        } else if (typeof error === 'string') {
          errorMessage = error;
        } else if (error && typeof error === 'object') {
          // Try to extract useful info from the error object
          const errorStr = JSON.stringify(error, null, 2);
          errorMessage = errorStr.length > 300 ? errorStr.substring(0, 300) + '...' : errorStr;
        }
        
        // Add context for common errors
        if (errorMessage.includes('401') || errorMessage.includes('unauthorized')) {
          errorMessage += '\n\n💡 This is likely an API key issue. Please verify your Vapi.ai API key.';
        } else if (errorMessage.includes('400') || errorMessage.includes('bad request')) {
          errorMessage += '\n\n💡 This is likely a configuration issue. The assistant setup may be invalid.';
        } else if (errorMessage.includes('permissions') || errorMessage.includes('microphone')) {
          errorMessage += '\n\n💡 Please grant microphone permissions when prompted.';
        }
        
      } catch (parseError) {
        console.error('Error parsing failed:', parseError);
        errorMessage = `Failed to parse error details. Original error type: ${typeof error}`;
      }
      
      setTranscript(prev => prev + `\n❌ Failed to start call: ${errorMessage}\n\n💡 Troubleshooting steps:\n• Click "Debug Info" to check configuration\n• Grant microphone permissions when prompted\n• Refresh the page and try again\n• Check browser console for detailed API errors\n`);
    }
  };

  const pauseCall = () => {
    // Since Vapi doesn't have native pause, we'll mute the microphone
    if (vapiInstance && isCallActive) {
      try {
        vapiInstance.setMuted(true);
        setCallStatus('paused');
        setTranscript(prev => prev + '\n⏸️ Call paused (microphone muted)\n');
      } catch (error) {
        console.error('Failed to pause call:', error);
      }
    }
  };

  const resumeCall = () => {
    if (vapiInstance && callStatus === 'paused') {
      try {
        vapiInstance.setMuted(false);
        setCallStatus('active');
        setTranscript(prev => prev + '\n▶️ Call resumed (microphone active)\n');
      } catch (error) {
        console.error('Failed to resume call:', error);
      }
    }
  };

  const endCall = () => {
    if (vapiInstance && isCallActive) {
      try {
        vapiInstance.stop();
        setCallStatus('ended');
        setIsCallActive(false);
        setTranscript(prev => prev + '\n🔴 Call ended by user\n');
        
        // Generate summary after a short delay
        setTimeout(() => {
          fetchCallSummary('user-ended');
        }, 1000);
      } catch (error) {
        console.error('Failed to end call:', error);
      }
    }
  };

  const getStatusColor = () => {
    switch (callStatus) {
      case 'active': return 'bg-green-500';
      case 'paused': return 'bg-yellow-500';
      case 'connecting': return 'bg-blue-500';
      case 'ended': return 'bg-gray-500';
      default: return 'bg-gray-400';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-lg p-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center">
              <button onClick={onBack} className="mr-4 text-gray-600 hover:text-gray-800">
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <h2 className="text-2xl font-bold text-gray-900">
                {type === 'mock_interview' ? 'Mock Interview Session' : 'One-on-One Conversation'}
              </h2>
            </div>
            <div className="flex items-center">
              <div className={`w-3 h-3 rounded-full ${getStatusColor()} mr-2`}></div>
              <span className="text-sm font-medium text-gray-700 capitalize">{callStatus}</span>
            </div>
          </div>

          {/* Call Controls */}
          <div className="flex justify-center space-x-4 mb-8">
            {callStatus === "ready" && (
              <button
                onClick={startCall}
                className="bg-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center"
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m2-10v.01M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10-4.477 10-10S17.523 2 12 2z" />
                </svg>
                Start {type === "mock_interview" ? "Interview" : "Conversation"}
              </button>
            )}
            {callStatus === 'connecting' && (
              <div className="flex items-center text-blue-600">
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 mr-2"></div>
                Connecting...
              </div>
            )}
            
            {callStatus === 'active' && (
              <>
                <button
                  onClick={pauseCall}
                  className="bg-yellow-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-yellow-600 transition-colors"
                >
                  Pause
                </button>
                <button
                  onClick={endCall}
                  className="bg-red-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-red-700 transition-colors"
                >
                  End Call
                </button>
              </>
            )}
            
            {callStatus === 'paused' && (
              <>
                <button
                  onClick={resumeCall}
                  className="bg-green-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors"
                >
                  Resume
                </button>
                <button
                  onClick={endCall}
                  className="bg-red-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-red-700 transition-colors"
                >
                  End Call
                </button>
              </>
            )}
          </div>

          {/* Transcript Section */}
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-3">Live Transcript</h3>
              <div className="bg-gray-50 rounded-lg p-4 h-96 overflow-y-auto border">
                <div className="text-sm text-gray-700 whitespace-pre-wrap font-mono leading-relaxed">
                  {transcript || '💡 Transcript will appear here during the conversation...\n\n📋 Tips:\n• Speak clearly and at a moderate pace\n• Wait for the AI to finish before responding\n• Take your time to think before answering'}
                </div>
              </div>
            </div>

            {/* Summary Section */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-3">Session Summary</h3>
              <div className="bg-gray-50 rounded-lg p-4 h-96 overflow-y-auto border">
                {callStatus === 'ended' && summary ? (
                  <div className="text-sm text-gray-700 whitespace-pre-wrap leading-relaxed">
                    {summary}
                  </div>
                ) : (
                  <div className="text-sm text-gray-500 italic">
                    <div className="text-center py-8">
                      <div className="text-2xl mb-2">📊</div>
                      <p>Summary will be generated after the {type === 'mock_interview' ? 'interview' : 'conversation'} ends...</p>
                      
                      {callStatus === 'active' && (
                        <div className="mt-4 text-xs">
                          <div className="animate-pulse">Analyzing conversation in real-time...</div>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Instructions */}
          <div className="mt-6 bg-blue-50 rounded-lg p-4">
            <h4 className="font-medium text-blue-800 mb-2">Instructions:</h4>
            <ul className="text-sm text-blue-700 space-y-1">
              <li>• Speak clearly and naturally</li>
              <li>• Take your time to think before responding</li>
              <li>• Use the pause button if you need a moment</li>
              <li>• {type === 'mock_interview' ? 'Treat this as a real interview scenario' : 'Engage as you would with your actual manager'}</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

// Main App Component
function App() {
  const [currentView, setCurrentView] = useState('landing'); // landing, auth, mock-interview-form, voice-conversation
  const [authType, setAuthType] = useState('signup'); // signup, login
  const [user, setUser] = useState(null);
  const [conversationData, setConversationData] = useState(null);

  // Check for existing user session on app load
  useEffect(() => {
    const savedUser = localStorage.getItem('user');
    const savedToken = localStorage.getItem('token');
    if (savedUser && savedToken) {
      try {
        setUser(JSON.parse(savedUser));
      } catch (error) {
        console.error('Error parsing saved user:', error);
        localStorage.removeItem('user');
        localStorage.removeItem('token');
      }
    }
  }, []);

  const handleSelectUseCase = (useCase) => {
    if (useCase === 'mock-interview') {
      setCurrentView('mock-interview-form');
    }
  };

  const handleShowAuth = (type) => {
    if (type === 'logout') {
      setUser(null);
      localStorage.removeItem('user');
      localStorage.removeItem('token');
      setCurrentView('landing');
    } else {
      setAuthType(type);
      setCurrentView('auth');
    }
  };

  const handleAuthSuccess = (userData) => {
    setUser(userData);
    setCurrentView('landing');
  };

  const handleStartInterview = (prompt, type) => {
    setConversationData({ prompt, type });
    setCurrentView('voice-conversation');
  };

  const handleBack = () => {
    setCurrentView('landing');
    setConversationData(null);
  };

  // Test API connection on mount
  useEffect(() => {
    const testApi = async () => {
      try {
        const response = await axios.get(`${API}/`);
        console.log('API Connected:', response.data.message);
      } catch (error) {
        console.error('API Connection failed:', error);
      }
    };
    testApi();
  }, []);

  return (
    <GoogleOAuthProvider clientId={GOOGLE_CLIENT_ID}>
      <div className="App">
        {currentView === 'landing' && (
          <LandingPage 
            onSelectUseCase={handleSelectUseCase} 
            onShowAuth={handleShowAuth}
            user={user}
          />
        )}
        
        {currentView === 'auth' && (
          <AuthComponent 
            authType={authType}
            onBack={handleBack} 
            onAuthSuccess={handleAuthSuccess} 
          />
        )}
        
        {currentView === 'mock-interview-form' && (
          <MockInterviewForm onBack={handleBack} onStartInterview={handleStartInterview} />
        )}
        
        {currentView === 'voice-conversation' && conversationData && (
          <VoiceConversation 
            prompt={conversationData.prompt} 
            type={conversationData.type} 
            onBack={handleBack} 
          />
        )}
      </div>
    </GoogleOAuthProvider>
  );
}

export default App;
